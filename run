#!/usr/bin/env python3
"""Repository entrypoint matching the ACME auto-grader contract."""
from __future__ import annotations

import argparse
import sys
from pathlib import Path

# Ensure ``src`` is importable before importing project modules.
PROJECT_ROOT = Path(__file__).resolve().parent
SRC_ROOT = PROJECT_ROOT / "src"
if str(SRC_ROOT) not in sys.path:
    sys.path.insert(0, str(SRC_ROOT))

from acme_cli.runner import CommandError, run_install, run_score, run_tests


def _build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description="ACME trustworthy model scoring CLI",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "command",
        help="Command to execute (install, test, or path to URL file)",
    )
    parser.add_argument(
        "extras",
        nargs=argparse.REMAINDER,
        help="Additional arguments forwarded to the underlying command",
    )
    return parser


def main(argv: list[str] | None = None) -> int:
    parser = _build_parser()
    ns = parser.parse_args(argv)
    if ns.command == "install":
        return run_install(ns.extras)
    if ns.command == "test":
        return run_tests(ns.extras)

    url_path = Path(ns.command)
    if not url_path.exists():
        parser.error(f"URL file does not exist: {url_path}")
    return run_score(url_path, ns.extras)


if __name__ == "__main__":  # pragma: no cover - exercised via acceptance
    try:
        raise SystemExit(main())
    except CommandError as exc:  # pragma: no cover - defensive
        print(exc, file=sys.stderr)
        raise SystemExit(1)
